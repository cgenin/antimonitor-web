/*
 * This file is generated by jOOQ.
 */
package fr.genin.christophe.antimonitor.jooq.generated.tables;


import fr.genin.christophe.antimonitor.jooq.generated.Keys;
import fr.genin.christophe.antimonitor.jooq.generated.Public;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.StoredServiceEventsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoredServiceEvents extends TableImpl<StoredServiceEventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.stored_service_events</code>
     */
    public static final StoredServiceEvents STORED_SERVICE_EVENTS = new StoredServiceEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoredServiceEventsRecord> getRecordType() {
        return StoredServiceEventsRecord.class;
    }

    /**
     * The column <code>public.stored_service_events.id</code>.
     */
    public final TableField<StoredServiceEventsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.stored_service_events.state</code>.
     */
    public final TableField<StoredServiceEventsRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.stored_service_events.document</code>.
     */
    public final TableField<StoredServiceEventsRecord, JSON> DOCUMENT = createField(DSL.name("document"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.stored_service_events.archive</code>.
     */
    public final TableField<StoredServiceEventsRecord, Boolean> ARCHIVE = createField(DSL.name("archive"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.stored_service_events.latest_update</code>.
     */
    public final TableField<StoredServiceEventsRecord, Long> LATEST_UPDATE = createField(DSL.name("latest_update"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.stored_service_events.original_id</code>.
     */
    public final TableField<StoredServiceEventsRecord, Long> ORIGINAL_ID = createField(DSL.name("original_id"), SQLDataType.BIGINT, this, "");

    private StoredServiceEvents(Name alias, Table<StoredServiceEventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private StoredServiceEvents(Name alias, Table<StoredServiceEventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.stored_service_events</code> table reference
     */
    public StoredServiceEvents(String alias) {
        this(DSL.name(alias), STORED_SERVICE_EVENTS);
    }

    /**
     * Create an aliased <code>public.stored_service_events</code> table reference
     */
    public StoredServiceEvents(Name alias) {
        this(alias, STORED_SERVICE_EVENTS);
    }

    /**
     * Create a <code>public.stored_service_events</code> table reference
     */
    public StoredServiceEvents() {
        this(DSL.name("stored_service_events"), null);
    }

    public <O extends Record> StoredServiceEvents(Table<O> child, ForeignKey<O, StoredServiceEventsRecord> key) {
        super(child, key, STORED_SERVICE_EVENTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<StoredServiceEventsRecord, Integer> getIdentity() {
        return (Identity<StoredServiceEventsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StoredServiceEventsRecord> getPrimaryKey() {
        return Keys.STORED_SERVICE_EVENTS_PKEY;
    }

    @Override
    public List<UniqueKey<StoredServiceEventsRecord>> getKeys() {
        return Arrays.<UniqueKey<StoredServiceEventsRecord>>asList(Keys.STORED_SERVICE_EVENTS_PKEY);
    }

    @Override
    public StoredServiceEvents as(String alias) {
        return new StoredServiceEvents(DSL.name(alias), this);
    }

    @Override
    public StoredServiceEvents as(Name alias) {
        return new StoredServiceEvents(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StoredServiceEvents rename(String name) {
        return new StoredServiceEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StoredServiceEvents rename(Name name) {
        return new StoredServiceEvents(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, JSON, Boolean, Long, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
