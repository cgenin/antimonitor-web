/*
 * This file is generated by jOOQ.
 */
package fr.genin.christophe.antimonitor.jooq.generated.tables.records;


import fr.genin.christophe.antimonitor.jooq.generated.tables.Projects;

import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectsRecord extends UpdatableRecordImpl<ProjectsRecord> implements Record3<String, String, JSON> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.projects.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.projects.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.projects.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.projects.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.projects.document</code>.
     */
    public void setDocument(JSON value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.projects.document</code>.
     */
    public JSON getDocument() {
        return (JSON) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, JSON> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, JSON> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Projects.PROJECTS.ID;
    }

    @Override
    public Field<String> field2() {
        return Projects.PROJECTS.NAME;
    }

    @Override
    public Field<JSON> field3() {
        return Projects.PROJECTS.DOCUMENT;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public JSON component3() {
        return getDocument();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public JSON value3() {
        return getDocument();
    }

    @Override
    public ProjectsRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public ProjectsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ProjectsRecord value3(JSON value) {
        setDocument(value);
        return this;
    }

    @Override
    public ProjectsRecord values(String value1, String value2, JSON value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProjectsRecord
     */
    public ProjectsRecord() {
        super(Projects.PROJECTS);
    }

    /**
     * Create a detached, initialised ProjectsRecord
     */
    public ProjectsRecord(String id, String name, JSON document) {
        super(Projects.PROJECTS);

        setId(id);
        setName(name);
        setDocument(document);
    }
}
