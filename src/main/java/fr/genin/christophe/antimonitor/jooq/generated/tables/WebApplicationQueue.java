/*
 * This file is generated by jOOQ.
 */
package fr.genin.christophe.antimonitor.jooq.generated.tables;


import fr.genin.christophe.antimonitor.jooq.generated.Keys;
import fr.genin.christophe.antimonitor.jooq.generated.Public;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.WebApplicationQueueRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WebApplicationQueue extends TableImpl<WebApplicationQueueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.web_application_queue</code>
     */
    public static final WebApplicationQueue WEB_APPLICATION_QUEUE = new WebApplicationQueue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WebApplicationQueueRecord> getRecordType() {
        return WebApplicationQueueRecord.class;
    }

    /**
     * The column <code>public.web_application_queue.id</code>.
     */
    public final TableField<WebApplicationQueueRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.web_application_queue.created_at</code>.
     */
    public final TableField<WebApplicationQueueRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.web_application_queue.state</code>.
     */
    public final TableField<WebApplicationQueueRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>public.web_application_queue.artifactid</code>.
     */
    public final TableField<WebApplicationQueueRecord, String> ARTIFACTID = createField(DSL.name("artifactid"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.web_application_queue.groupid</code>.
     */
    public final TableField<WebApplicationQueueRecord, String> GROUPID = createField(DSL.name("groupid"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.web_application_queue.version</code>.
     */
    public final TableField<WebApplicationQueueRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.web_application_queue.packagesjson</code>.
     */
    public final TableField<WebApplicationQueueRecord, JSON> PACKAGESJSON = createField(DSL.name("packagesjson"), SQLDataType.JSON, this, "");

    private WebApplicationQueue(Name alias, Table<WebApplicationQueueRecord> aliased) {
        this(alias, aliased, null);
    }

    private WebApplicationQueue(Name alias, Table<WebApplicationQueueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.web_application_queue</code> table reference
     */
    public WebApplicationQueue(String alias) {
        this(DSL.name(alias), WEB_APPLICATION_QUEUE);
    }

    /**
     * Create an aliased <code>public.web_application_queue</code> table reference
     */
    public WebApplicationQueue(Name alias) {
        this(alias, WEB_APPLICATION_QUEUE);
    }

    /**
     * Create a <code>public.web_application_queue</code> table reference
     */
    public WebApplicationQueue() {
        this(DSL.name("web_application_queue"), null);
    }

    public <O extends Record> WebApplicationQueue(Table<O> child, ForeignKey<O, WebApplicationQueueRecord> key) {
        super(child, key, WEB_APPLICATION_QUEUE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<WebApplicationQueueRecord> getPrimaryKey() {
        return Keys.WEB_APPLICATION_QUEUE_PKEY;
    }

    @Override
    public List<UniqueKey<WebApplicationQueueRecord>> getKeys() {
        return Arrays.<UniqueKey<WebApplicationQueueRecord>>asList(Keys.WEB_APPLICATION_QUEUE_PKEY);
    }

    @Override
    public WebApplicationQueue as(String alias) {
        return new WebApplicationQueue(DSL.name(alias), this);
    }

    @Override
    public WebApplicationQueue as(Name alias) {
        return new WebApplicationQueue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WebApplicationQueue rename(String name) {
        return new WebApplicationQueue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WebApplicationQueue rename(Name name) {
        return new WebApplicationQueue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, LocalDateTime, String, String, String, String, JSON> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
