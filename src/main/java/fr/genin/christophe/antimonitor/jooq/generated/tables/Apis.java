/*
 * This file is generated by jOOQ.
 */
package fr.genin.christophe.antimonitor.jooq.generated.tables;


import fr.genin.christophe.antimonitor.jooq.generated.Keys;
import fr.genin.christophe.antimonitor.jooq.generated.Public;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.ApisRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Apis extends TableImpl<ApisRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.apis</code>
     */
    public static final Apis APIS = new Apis();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApisRecord> getRecordType() {
        return ApisRecord.class;
    }

    /**
     * The column <code>public.apis.id</code>.
     */
    public final TableField<ApisRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.apis.method</code>.
     */
    public final TableField<ApisRecord, String> METHOD = createField(DSL.name("method"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.apis.fullurl</code>.
     */
    public final TableField<ApisRecord, String> FULLURL = createField(DSL.name("fullurl"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.apis.idproject</code>.
     */
    public final TableField<ApisRecord, String> IDPROJECT = createField(DSL.name("idproject"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.apis.document</code>.
     */
    public final TableField<ApisRecord, JSON> DOCUMENT = createField(DSL.name("document"), SQLDataType.JSON, this, "");

    private Apis(Name alias, Table<ApisRecord> aliased) {
        this(alias, aliased, null);
    }

    private Apis(Name alias, Table<ApisRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.apis</code> table reference
     */
    public Apis(String alias) {
        this(DSL.name(alias), APIS);
    }

    /**
     * Create an aliased <code>public.apis</code> table reference
     */
    public Apis(Name alias) {
        this(alias, APIS);
    }

    /**
     * Create a <code>public.apis</code> table reference
     */
    public Apis() {
        this(DSL.name("apis"), null);
    }

    public <O extends Record> Apis(Table<O> child, ForeignKey<O, ApisRecord> key) {
        super(child, key, APIS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ApisRecord> getPrimaryKey() {
        return Keys.APIS_PKEY;
    }

    @Override
    public List<UniqueKey<ApisRecord>> getKeys() {
        return Arrays.<UniqueKey<ApisRecord>>asList(Keys.APIS_PKEY);
    }

    @Override
    public Apis as(String alias) {
        return new Apis(DSL.name(alias), this);
    }

    @Override
    public Apis as(Name alias) {
        return new Apis(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Apis rename(String name) {
        return new Apis(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apis rename(Name name) {
        return new Apis(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, JSON> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
