/*
 * This file is generated by jOOQ.
 */
package fr.genin.christophe.antimonitor.jooq.generated.tables;


import fr.genin.christophe.antimonitor.jooq.generated.Keys;
import fr.genin.christophe.antimonitor.jooq.generated.Public;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.ConfigurationRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Configuration extends TableImpl<ConfigurationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.configuration</code>
     */
    public static final Configuration CONFIGURATION = new Configuration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigurationRecord> getRecordType() {
        return ConfigurationRecord.class;
    }

    /**
     * The column <code>public.configuration.id</code>.
     */
    public final TableField<ConfigurationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.configuration.configuration</code>.
     */
    public final TableField<ConfigurationRecord, JSON> CONFIGURATION_ = createField(DSL.name("configuration"), SQLDataType.JSON, this, "");

    private Configuration(Name alias, Table<ConfigurationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Configuration(Name alias, Table<ConfigurationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.configuration</code> table reference
     */
    public Configuration(String alias) {
        this(DSL.name(alias), CONFIGURATION);
    }

    /**
     * Create an aliased <code>public.configuration</code> table reference
     */
    public Configuration(Name alias) {
        this(alias, CONFIGURATION);
    }

    /**
     * Create a <code>public.configuration</code> table reference
     */
    public Configuration() {
        this(DSL.name("configuration"), null);
    }

    public <O extends Record> Configuration(Table<O> child, ForeignKey<O, ConfigurationRecord> key) {
        super(child, key, CONFIGURATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ConfigurationRecord> getPrimaryKey() {
        return Keys.CONFIGURATION_PKEY;
    }

    @Override
    public List<UniqueKey<ConfigurationRecord>> getKeys() {
        return Arrays.<UniqueKey<ConfigurationRecord>>asList(Keys.CONFIGURATION_PKEY);
    }

    @Override
    public Configuration as(String alias) {
        return new Configuration(DSL.name(alias), this);
    }

    @Override
    public Configuration as(Name alias) {
        return new Configuration(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Configuration rename(String name) {
        return new Configuration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Configuration rename(Name name) {
        return new Configuration(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, JSON> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
