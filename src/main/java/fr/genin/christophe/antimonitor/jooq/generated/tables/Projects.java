/*
 * This file is generated by jOOQ.
 */
package fr.genin.christophe.antimonitor.jooq.generated.tables;


import fr.genin.christophe.antimonitor.jooq.generated.Keys;
import fr.genin.christophe.antimonitor.jooq.generated.Public;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.ProjectsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Projects extends TableImpl<ProjectsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.projects</code>
     */
    public static final Projects PROJECTS = new Projects();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectsRecord> getRecordType() {
        return ProjectsRecord.class;
    }

    /**
     * The column <code>public.projects.id</code>.
     */
    public final TableField<ProjectsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(767).nullable(false), this, "");

    /**
     * The column <code>public.projects.name</code>.
     */
    public final TableField<ProjectsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.projects.document</code>.
     */
    public final TableField<ProjectsRecord, JSON> DOCUMENT = createField(DSL.name("document"), SQLDataType.JSON, this, "");

    private Projects(Name alias, Table<ProjectsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Projects(Name alias, Table<ProjectsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.projects</code> table reference
     */
    public Projects(String alias) {
        this(DSL.name(alias), PROJECTS);
    }

    /**
     * Create an aliased <code>public.projects</code> table reference
     */
    public Projects(Name alias) {
        this(alias, PROJECTS);
    }

    /**
     * Create a <code>public.projects</code> table reference
     */
    public Projects() {
        this(DSL.name("projects"), null);
    }

    public <O extends Record> Projects(Table<O> child, ForeignKey<O, ProjectsRecord> key) {
        super(child, key, PROJECTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProjectsRecord> getPrimaryKey() {
        return Keys.PROJECTS_PKEY;
    }

    @Override
    public List<UniqueKey<ProjectsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectsRecord>>asList(Keys.PROJECTS_PKEY);
    }

    @Override
    public Projects as(String alias) {
        return new Projects(DSL.name(alias), this);
    }

    @Override
    public Projects as(Name alias) {
        return new Projects(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Projects rename(String name) {
        return new Projects(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Projects rename(Name name) {
        return new Projects(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, JSON> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
