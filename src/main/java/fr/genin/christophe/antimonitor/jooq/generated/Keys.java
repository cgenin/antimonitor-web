/*
 * This file is generated by jOOQ.
 */
package fr.genin.christophe.antimonitor.jooq.generated;


import fr.genin.christophe.antimonitor.jooq.generated.tables.Apis;
import fr.genin.christophe.antimonitor.jooq.generated.tables.Configuration;
import fr.genin.christophe.antimonitor.jooq.generated.tables.Dependencies;
import fr.genin.christophe.antimonitor.jooq.generated.tables.FrontApps;
import fr.genin.christophe.antimonitor.jooq.generated.tables.Projects;
import fr.genin.christophe.antimonitor.jooq.generated.tables.Queue;
import fr.genin.christophe.antimonitor.jooq.generated.tables.StoredServiceEvents;
import fr.genin.christophe.antimonitor.jooq.generated.tables.Tables;
import fr.genin.christophe.antimonitor.jooq.generated.tables.Versions;
import fr.genin.christophe.antimonitor.jooq.generated.tables.WebApplicationQueue;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.ApisRecord;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.ConfigurationRecord;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.DependenciesRecord;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.FrontAppsRecord;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.ProjectsRecord;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.QueueRecord;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.StoredServiceEventsRecord;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.TablesRecord;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.VersionsRecord;
import fr.genin.christophe.antimonitor.jooq.generated.tables.records.WebApplicationQueueRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ApisRecord> APIS_PKEY = Internal.createUniqueKey(Apis.APIS, DSL.name("apis_pkey"), new TableField[] { Apis.APIS.ID }, true);
    public static final UniqueKey<ConfigurationRecord> CONFIGURATION_PKEY = Internal.createUniqueKey(Configuration.CONFIGURATION, DSL.name("configuration_pkey"), new TableField[] { Configuration.CONFIGURATION.ID }, true);
    public static final UniqueKey<DependenciesRecord> DEPENDENCIES_PKEY = Internal.createUniqueKey(Dependencies.DEPENDENCIES, DSL.name("dependencies_pkey"), new TableField[] { Dependencies.DEPENDENCIES.RESOURCE, Dependencies.DEPENDENCIES.USED_BY }, true);
    public static final UniqueKey<FrontAppsRecord> FRONT_APPS_PKEY = Internal.createUniqueKey(FrontApps.FRONT_APPS, DSL.name("front_apps_pkey"), new TableField[] { FrontApps.FRONT_APPS.ID }, true);
    public static final UniqueKey<ProjectsRecord> PROJECTS_PKEY = Internal.createUniqueKey(Projects.PROJECTS, DSL.name("projects_pkey"), new TableField[] { Projects.PROJECTS.ID }, true);
    public static final UniqueKey<QueueRecord> QUEUE_PKEY = Internal.createUniqueKey(Queue.QUEUE, DSL.name("queue_pkey"), new TableField[] { Queue.QUEUE.ID }, true);
    public static final UniqueKey<StoredServiceEventsRecord> STORED_SERVICE_EVENTS_PKEY = Internal.createUniqueKey(StoredServiceEvents.STORED_SERVICE_EVENTS, DSL.name("stored_service_events_pkey"), new TableField[] { StoredServiceEvents.STORED_SERVICE_EVENTS.ID }, true);
    public static final UniqueKey<TablesRecord> TABLES_PKEY = Internal.createUniqueKey(Tables.TABLES, DSL.name("tables_pkey"), new TableField[] { Tables.TABLES.ID }, true);
    public static final UniqueKey<VersionsRecord> VERSIONS_PKEY = Internal.createUniqueKey(Versions.VERSIONS, DSL.name("versions_pkey"), new TableField[] { Versions.VERSIONS.ID }, true);
    public static final UniqueKey<WebApplicationQueueRecord> WEB_APPLICATION_QUEUE_PKEY = Internal.createUniqueKey(WebApplicationQueue.WEB_APPLICATION_QUEUE, DSL.name("web_application_queue_pkey"), new TableField[] { WebApplicationQueue.WEB_APPLICATION_QUEUE.ID }, true);
}
