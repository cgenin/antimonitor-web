/*
 * This file is generated by jOOQ.
 */
package fr.genin.christophe.antimonitor.jooq.generated.tables.records;


import fr.genin.christophe.antimonitor.jooq.generated.tables.Queue;

import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QueueRecord extends UpdatableRecordImpl<QueueRecord> implements Record4<Integer, Integer, JSON, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.queue.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.queue.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.queue.state</code>.
     */
    public void setState(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.queue.state</code>.
     */
    public Integer getState() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.queue.document</code>.
     */
    public void setDocument(JSON value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.queue.document</code>.
     */
    public JSON getDocument() {
        return (JSON) get(2);
    }

    /**
     * Setter for <code>public.queue.latest_update</code>.
     */
    public void setLatestUpdate(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.queue.latest_update</code>.
     */
    public Long getLatestUpdate() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, JSON, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, JSON, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Queue.QUEUE.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Queue.QUEUE.STATE;
    }

    @Override
    public Field<JSON> field3() {
        return Queue.QUEUE.DOCUMENT;
    }

    @Override
    public Field<Long> field4() {
        return Queue.QUEUE.LATEST_UPDATE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getState();
    }

    @Override
    public JSON component3() {
        return getDocument();
    }

    @Override
    public Long component4() {
        return getLatestUpdate();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getState();
    }

    @Override
    public JSON value3() {
        return getDocument();
    }

    @Override
    public Long value4() {
        return getLatestUpdate();
    }

    @Override
    public QueueRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public QueueRecord value2(Integer value) {
        setState(value);
        return this;
    }

    @Override
    public QueueRecord value3(JSON value) {
        setDocument(value);
        return this;
    }

    @Override
    public QueueRecord value4(Long value) {
        setLatestUpdate(value);
        return this;
    }

    @Override
    public QueueRecord values(Integer value1, Integer value2, JSON value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached QueueRecord
     */
    public QueueRecord() {
        super(Queue.QUEUE);
    }

    /**
     * Create a detached, initialised QueueRecord
     */
    public QueueRecord(Integer id, Integer state, JSON document, Long latestUpdate) {
        super(Queue.QUEUE);

        setId(id);
        setState(state);
        setDocument(document);
        setLatestUpdate(latestUpdate);
    }
}
