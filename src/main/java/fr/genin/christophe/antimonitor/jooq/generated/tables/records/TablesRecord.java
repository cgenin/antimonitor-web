/*
 * This file is generated by jOOQ.
 */
package fr.genin.christophe.antimonitor.jooq.generated.tables.records;


import fr.genin.christophe.antimonitor.jooq.generated.tables.Tables;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TablesRecord extends UpdatableRecordImpl<TablesRecord> implements Record4<String, String, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.tables.id</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.tables.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.tables.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.tables.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.tables.service</code>.
     */
    public void setService(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.tables.service</code>.
     */
    public String getService() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.tables.latestupdate</code>.
     */
    public void setLatestupdate(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.tables.latestupdate</code>.
     */
    public Long getLatestupdate() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Tables.TABLES.ID;
    }

    @Override
    public Field<String> field2() {
        return Tables.TABLES.NAME;
    }

    @Override
    public Field<String> field3() {
        return Tables.TABLES.SERVICE;
    }

    @Override
    public Field<Long> field4() {
        return Tables.TABLES.LATESTUPDATE;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getService();
    }

    @Override
    public Long component4() {
        return getLatestupdate();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getService();
    }

    @Override
    public Long value4() {
        return getLatestupdate();
    }

    @Override
    public TablesRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public TablesRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public TablesRecord value3(String value) {
        setService(value);
        return this;
    }

    @Override
    public TablesRecord value4(Long value) {
        setLatestupdate(value);
        return this;
    }

    @Override
    public TablesRecord values(String value1, String value2, String value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TablesRecord
     */
    public TablesRecord() {
        super(Tables.TABLES);
    }

    /**
     * Create a detached, initialised TablesRecord
     */
    public TablesRecord(String id, String name, String service, Long latestupdate) {
        super(Tables.TABLES);

        setId(id);
        setName(name);
        setService(service);
        setLatestupdate(latestupdate);
    }
}
