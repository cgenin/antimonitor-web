/*
 * This file is generated by jOOQ.
 */
package fr.genin.christophe.antimonitor.jooq.generated.tables.records;


import fr.genin.christophe.antimonitor.jooq.generated.tables.Configuration;

import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConfigurationRecord extends UpdatableRecordImpl<ConfigurationRecord> implements Record2<Integer, JSON> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.configuration.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.configuration.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.configuration.configuration</code>.
     */
    public void setConfiguration(JSON value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.configuration.configuration</code>.
     */
    public JSON getConfiguration() {
        return (JSON) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, JSON> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, JSON> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Configuration.CONFIGURATION.ID;
    }

    @Override
    public Field<JSON> field2() {
        return Configuration.CONFIGURATION.CONFIGURATION_;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public JSON component2() {
        return getConfiguration();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public JSON value2() {
        return getConfiguration();
    }

    @Override
    public ConfigurationRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ConfigurationRecord value2(JSON value) {
        setConfiguration(value);
        return this;
    }

    @Override
    public ConfigurationRecord values(Integer value1, JSON value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConfigurationRecord
     */
    public ConfigurationRecord() {
        super(Configuration.CONFIGURATION);
    }

    /**
     * Create a detached, initialised ConfigurationRecord
     */
    public ConfigurationRecord(Integer id, JSON configuration) {
        super(Configuration.CONFIGURATION);

        setId(id);
        setConfiguration(configuration);
    }
}
